// ResolveCollisions_Sphere.comp
#version 460
layout(local_size_x = 128) in;

struct Particle {
    vec4 x;
    vec4 v;
    vec4 p;
    vec4 color;
    vec4 meta;
};
layout(std430, binding = 0) buffer ParticlesSSBO { Particle particles[]; };

uniform uint  uNumParticles;
uniform float uRestitution;      // 0.0 = inelástico, 1.0 = elástico

uniform vec3  uSphereCenter;
uniform float uSphereRadius;

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= uNumParticles) return;

    vec3 pos = particles[i].x.xyz;
    vec3 vel = particles[i].v.xyz;

    vec3  toCenter = pos - uSphereCenter;
    float dist2    = dot(toCenter, toCenter);
    float r        = uSphereRadius;

    if (dist2 > r * r)
    {
        float dist = sqrt(dist2);

        vec3 n = (dist > 0.0) ? (toCenter / dist) : vec3(0.0, 1.0, 0.0);

        pos = uSphereCenter + n * r;
        vel = reflect(vel, n) * uRestitution;
    }

    particles[i].x.xyz = pos;
    particles[i].p.xyz = pos;
    particles[i].v.xyz = vel;
}
