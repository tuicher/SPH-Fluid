// UpdateVelocity.comp
#version 460
layout(local_size_x = 256) in;

struct Particle {
    vec4  x;      // posición   (w = 1)
    vec4  v;      // velocidad  (w sin usar)
    vec4  p;      // posición predicha
    vec4  color;
    vec4  meta;   // meta.x = mass
};

layout(std430, binding = 0) buffer Particles { Particle part[]; };

layout(location = 0) uniform float uDeltaTime;
layout(location = 1) uniform float uDamping;   // opcional (0.99‑1.0)

void main()
{
    uint i = gl_GlobalInvocationID.x;
    Particle  P = part[i];

    // nueva velocidad   vᵢ = (pᵢ – xᵢ) / dt
    vec3 v_new = (P.p.xyz - P.x.xyz) / uDeltaTime;

    // amortiguación numérica ligera
    v_new *= uDamping;

    // consolidar posición
    P.x.xyz = P.p.xyz;
    P.v.xyz = v_new;

    part[i] = P;
}
